package com.mark.cyberpunkplayer.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SMB_BEAN".
*/
public class SmbBeanDao extends AbstractDao<SmbBean, Long> {

    public static final String TABLENAME = "SMB_BEAN";

    /**
     * Properties of entity SmbBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property SessionId = new Property(0, long.class, "sessionId", true, "_id");
        public final static Property MarkName = new Property(1, String.class, "markName", false, "MARK_NAME");
        public final static Property HostName = new Property(2, String.class, "hostName", false, "HOST_NAME");
        public final static Property UserName = new Property(3, String.class, "userName", false, "USER_NAME");
        public final static Property Password = new Property(4, String.class, "password", false, "PASSWORD");
        public final static Property DiskPath = new Property(5, String.class, "diskPath", false, "DISK_PATH");
        public final static Property FolderPath = new Property(6, String.class, "folderPath", false, "FOLDER_PATH");
        public final static Property FileName = new Property(7, String.class, "fileName", false, "FILE_NAME");
        public final static Property IsDirectory = new Property(8, boolean.class, "isDirectory", false, "IS_DIRECTORY");
        public final static Property Port = new Property(9, int.class, "port", false, "PORT");
        public final static Property ShowLevel = new Property(10, int.class, "showLevel", false, "SHOW_LEVEL");
    }


    public SmbBeanDao(DaoConfig config) {
        super(config);
    }
    
    public SmbBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SMB_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: sessionId
                "\"MARK_NAME\" TEXT," + // 1: markName
                "\"HOST_NAME\" TEXT," + // 2: hostName
                "\"USER_NAME\" TEXT," + // 3: userName
                "\"PASSWORD\" TEXT," + // 4: password
                "\"DISK_PATH\" TEXT," + // 5: diskPath
                "\"FOLDER_PATH\" TEXT," + // 6: folderPath
                "\"FILE_NAME\" TEXT," + // 7: fileName
                "\"IS_DIRECTORY\" INTEGER NOT NULL ," + // 8: isDirectory
                "\"PORT\" INTEGER NOT NULL ," + // 9: port
                "\"SHOW_LEVEL\" INTEGER NOT NULL );"); // 10: showLevel
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SMB_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SmbBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getSessionId());
 
        String markName = entity.getMarkName();
        if (markName != null) {
            stmt.bindString(2, markName);
        }
 
        String hostName = entity.getHostName();
        if (hostName != null) {
            stmt.bindString(3, hostName);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(4, userName);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(5, password);
        }
 
        String diskPath = entity.getDiskPath();
        if (diskPath != null) {
            stmt.bindString(6, diskPath);
        }
 
        String folderPath = entity.getFolderPath();
        if (folderPath != null) {
            stmt.bindString(7, folderPath);
        }
 
        String fileName = entity.getFileName();
        if (fileName != null) {
            stmt.bindString(8, fileName);
        }
        stmt.bindLong(9, entity.getIsDirectory() ? 1L: 0L);
        stmt.bindLong(10, entity.getPort());
        stmt.bindLong(11, entity.getShowLevel());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SmbBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getSessionId());
 
        String markName = entity.getMarkName();
        if (markName != null) {
            stmt.bindString(2, markName);
        }
 
        String hostName = entity.getHostName();
        if (hostName != null) {
            stmt.bindString(3, hostName);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(4, userName);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(5, password);
        }
 
        String diskPath = entity.getDiskPath();
        if (diskPath != null) {
            stmt.bindString(6, diskPath);
        }
 
        String folderPath = entity.getFolderPath();
        if (folderPath != null) {
            stmt.bindString(7, folderPath);
        }
 
        String fileName = entity.getFileName();
        if (fileName != null) {
            stmt.bindString(8, fileName);
        }
        stmt.bindLong(9, entity.getIsDirectory() ? 1L: 0L);
        stmt.bindLong(10, entity.getPort());
        stmt.bindLong(11, entity.getShowLevel());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public SmbBean readEntity(Cursor cursor, int offset) {
        SmbBean entity = new SmbBean( //
            cursor.getLong(offset + 0), // sessionId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // markName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // hostName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // userName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // password
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // diskPath
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // folderPath
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // fileName
            cursor.getShort(offset + 8) != 0, // isDirectory
            cursor.getInt(offset + 9), // port
            cursor.getInt(offset + 10) // showLevel
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SmbBean entity, int offset) {
        entity.setSessionId(cursor.getLong(offset + 0));
        entity.setMarkName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setHostName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUserName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPassword(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDiskPath(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setFolderPath(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setFileName(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setIsDirectory(cursor.getShort(offset + 8) != 0);
        entity.setPort(cursor.getInt(offset + 9));
        entity.setShowLevel(cursor.getInt(offset + 10));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(SmbBean entity, long rowId) {
        entity.setSessionId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(SmbBean entity) {
        if(entity != null) {
            return entity.getSessionId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(SmbBean entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
